---

- name: get ip
  command: oc --context {{ cluster.context }} get service -n {{ namespace }} {{ appname }}-{{ node.name.split('.')[0] }} -o custom-columns=IP:status.loadBalancer.ingress[0].ip --no-headers=true
  register: ip
  when: service_type == 'LoadBalancer'

- name: create node struct
  set_fact:
    node_struct: "{{ dict({'public_ip': ip.stdout, 'port': tunnel_port }) | combine(node)  }}"
  when: service_type == 'LoadBalancer' 
  
- name: get port
  command: oc --context {{ cluster.context }} get service -n {{ namespace }} {{ appname }}-{{ node.name.split('.')[0] }} -o custom-columns=PORT:spec.ports[0].nodePort --no-headers=true
  register: port
  when: service_type == 'NodePort'

- name: create node struct
  set_fact:
    node_struct: "{{ {'public_ip': node.ip, 'port': port.stdout } | combine(node)  }}"
  when: service_type == 'NodePort'         
     
- name: add node struct
  set_fact:
    cluster_nodes: "{{ cluster_nodes | union( [node_struct] ) }}" 
